CREATE TYPE game_state AS ENUM ('WAITING', 'RUNNING', 'PAUSE', 'OVER');
CREATE TYPE game_type AS ENUM ('IA', 'TOURNAMENT', 'VS');

CREATE TABLE IF NOT EXISTS games (
	id SERIAL PRIMARY KEY,
	p1_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	p2_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	state game_state NOT NULL DEFAULT 'RUNNING',
	p1_score INT NOT NULL DEFAULT 0,
  	p2_score INT NOT NULL DEFAULT 0,
	p1_bot BOOLEAN NOT NULL DEFAULT FALSE,
	p2_bot BOOLEAN NOT NULL DEFAULT FALSE,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	type game_type NOT NULL
);


CREATE OR REPLACE FUNCTION enforce_game_constraints() RETURNS trigger AS $$
BEGIN
	IF NEW.p1_bot = TRUE AND NEW.p1_id IS NULL THEN
    	RAISE EXCEPTION 'Player 1 is not a bot and should have id';

	ELSIF NEW.p2_bot = TRUE AND NEW.p2_id IS NULL THEN
    	RAISE EXCEPTION 'Player 2 is not a bot and should have id';
	END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER enforce_game_constraints
BEFORE INSERT OR UPDATE ON games
FOR EACH ROW EXECUTE FUNCTION enforce_game_constraints();

GRANT ALL PRIVILEGES ON TABLE games TO "${DB_USER}";