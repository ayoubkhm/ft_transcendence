user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Preserve common proxy headers
    include /etc/nginx/proxy_params;
    # WebSocket upgrade support
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream services
    upstream auth_service {
        server auth_service:3000;
    }
    upstream game_service {
        # Game service listens on port 3001 inside the container
        server game_service:3001;
    }
    # User service: routes under /api/user/, container listens on port 3000
    upstream user_service {
        server user_service:3000;
    }
    upstream frontend {
        server frontend:4000;
    }
    # Tournament service: handles tournament CRUD, joins, leaves, etc.
    upstream tournament_service {
        server tournament_service:3000;
    }


    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        # HSTS (force HTTPS for 6 months; preload optional)
        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
        # Prevent content type sniffing
        add_header X-Content-Type-Options nosniff;
        # Disable iframe embedding
        add_header X-Frame-Options DENY;
        # Enable XSS protection in older browsers
        add_header X-XSS-Protection "1; mode=block";

        # Auth service
        location /api/auth/ {
            proxy_pass http://auth_service;
        }

        # Game service API and WebSocket proxy
        # Match both the base /api/game and any subpaths
        
        location = /api/game/state {
            proxy_pass http://tournament_service;
        }

        location /api/game {
            proxy_pass http://game_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        # User service API
        location /api/user/ {
            proxy_pass http://user_service;
        }
        # Tournament service API
        # Exact match for listing all tournaments
        location = /api/tournaments {
            proxy_pass http://tournament_service/;
        }
        # Handles all other tournament actions, including websockets
        location /api/tournaments/ {
            proxy_pass http://tournament_service/;   # ‚Üê trailing slash added
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
        }

        # Game service metrics
        location /metrics {
            proxy_pass http://game_service;
        }

        # Frontend SPA (including Vite HMR WebSocket)
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }
}
